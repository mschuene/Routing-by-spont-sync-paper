from tqdm import tqdm
import itertools 
from utils.spectral import *
import numba
import pickle
import mpmath as m   

def ehe_ana(alpha,N):
    return [m.exp(m.log((1/N))+m.log(m.binomial(N,n))+m.log(n*alpha/N)*(n-1)+
                       m.log(1-(n*alpha/N))*(N-n-1)+m.log(((1-alpha)/(1-((N-1)/N)*alpha))))
            for n in range(1,N+1)]


@numba.njit(cache=True)
def sim_iaf(ns,dt,ext_inputs,tau = 10e-3,Vthr = 1,dV = 1/20):
    V = 0#np.zeros((ns,))
    s = []
    for i in range(ns-1):
        V = V+dt*(-V)/tau
        V+= dV*ext_inputs[i]
        if V>Vthr:
            s.append(i)
            V -= 1
            #V = 0
    return V,s

@numba.njit(cache=True)
def sim_iaf_network(N,ns,dt,ext_inputs,tau = 10e-3,Vthr = 1,dV = 1/20):
    V = np.random.random((N,))
    s = []
    for i in range(ns-1):
        V = V+dt*(-V)/tau
        V+= dV*ext_inputs[i]
        if V>Vthr:
            s.append(i)
            V -= 1
    return V,s


@numba.njit(cache=True)
def sim_iaf_discrete(ns,dt,ext_inputs,level_spike,level_leak,num_levels=1000,p_leak=0.0642):
    V = 0
    s = []
    for i in range(ns-1):
        if ext_inputs[i] == 0:
            V = V-(np.random.rand()<p_leak)*level_leak
        V = max(V+level_spike*ext_inputs[i],0)
        if V>=num_levels:
            s.append(i)
            V = 0
    return V,s



def sc_plot(c4A,c4B,taus,freqs,titleA='spectral coherence v4 A',titleB='spectral coherence v4 B',suptitle=''):
    f = plt.figure(figsize=(12,6))
    plt.subplot(1,2,1)
    dtau =taus[1]-taus[0]
    ptaus = np.concatenate(([taus[0]-dtau],taus))+0.5*dtau
    #taus = np.array([-0.15,-0.05,0.05,0.15])
    vmax = max(np.max(c4A),np.max(c4B))
    im = plt.pcolormesh(ptaus,freqs,c4A,cmap='viridis', shading='flat',vmin=0,vmax=vmax)
    plt.yscale('log')
    plt.xlabel('tau [s]')
    plt.ylabel('frequency [Hz]')
    plt.title(titleA)
    plt.colorbar(im)
    plt.subplot(1,2,2)

    im = plt.pcolormesh(ptaus,freqs,c4B,cmap='viridis', shading='flat',vmin=0,vmax=vmax)
    plt.yscale('log')
    plt.xlabel('tau [s]')
    plt.ylabel('frequency [Hz]')
    plt.title(titleB)
    plt.colorbar(im)
    plt.suptitle(suptitle+str(round(np.sum(c4A),2))+','+str(round(np.sum(c4B),2)))
    return f

nf = 5
d_levels = np.linspace(-1,1,nf)
def flicker(levels=None):
    levels = d_levels if levels is None else levels
    return levels[np.random.randint(0,len(levels))]



@numba.njit(cache=True)
def get_avinc(A,Ns,nNs):
    pop_ids = lambda k: slice(nNs[k],nNs[k+1],None)
    avinc = np.zeros(len(Ns),dtype=np.int64)
    for k in range(len(Ns)):
        avinc[k]+= np.sum(A[pop_ids(k)])
    return avinc


@numba.njit(cache=True)
def simulate_model_subnets(Ns,W,p,deltaU,num_steps=None,num_av=None,u0=None,outdir=None):
    Ns = np.array(Ns,dtype=np.int64)
    N = np.sum(Ns)
    u = np.random.random((N,)) if u0 is None else u0
    avc = 0
    step = 0
    neurons = np.arange(N)
    I = np.eye(len(Ns))
    avs = []
    avt = []
    #pc = np.cumsum(np.concatenate(tuple([np.array([ps/n]*n) for ps,n in zip(p,Ns)])))
    avu = []
    ks = []
    cNs = np.cumsum(Ns)
    nNs = np.concatenate((np.array([0]),cNs))
    pop_ids = lambda k: slice(nNs[k],nNs[k+1],None)
    pbig = np.zeros(N)
    for k in range(len(Ns)):
        pbig[pop_ids(k)] = p[k]/Ns[k]
    pc = np.cumsum(pbig)
    #pc = np.cumsum(np.concatenate([[ps/n]*n for ps,n in zip(p,Ns)]))

    while avc < num_av if num_av is not None else step < num_steps:
        k = np.searchsorted(pc,np.random.random())
        ks.append(np.searchsorted(cNs,k+1))
        u[k] += deltaU
        if u[k] > 1:
            avc+= 1
            avsize = np.zeros(len(Ns),dtype=np.int64)
            A = u > 1;
            avinc = get_avinc(A,Ns,nNs) # vector len(Ns)
            avt.append(step)
            avunits = []
            while np.sum(avinc) > 0:
                avsize += avinc
                u[A] -= 1
                rec_int = W@avinc.astype(np.float64)
                for i in range(len(Ns)):
                    u[pop_ids(i)]+=rec_int[i]/Ns[i]
                A = u>1
                avinc = get_avinc(A,Ns,nNs)
            avs.append(avsize)
            #avu.append(avunits)
        step += 1
    return avs,np.array(avt),u,ks

@numba.njit(cache=True)
def simulate_model_subnets_thresholds(Ns,W,p,deltaU,thresh=0,num_steps=None,num_av=None,u0=None,outdir=None):
    th_idx = 2
    Ns = np.array(Ns,dtype=np.int64)
    N = np.sum(Ns)
    u = np.random.random((N,)) if u0 is None else u0
    avc = 0
    step = 0
    neurons = np.arange(N)
    I = np.eye(len(Ns))
    avs = []
    avt = []
    #pc = np.cumsum(np.concatenate(tuple([np.array([ps/n]*n) for ps,n in zip(p,Ns)])))
    avu = []
    ks = []
    cNs = np.cumsum(Ns)
    nNs = np.concatenate((np.array([0]),cNs))
    pop_ids = lambda k: slice(nNs[k],nNs[k+1],None)
    pbig = np.zeros(N)
    for k in range(len(Ns)):
        pbig[pop_ids(k)] = p[k]/Ns[k]
    pc = np.cumsum(pbig)
    u_saved = u.copy()
    #pc = np.cumsum(np.concatenate([[ps/n]*n for ps,n in zip(p,Ns)]))

    while avc < num_av if num_av is not None else step < num_steps:
        k = np.searchsorted(pc,np.random.random())
        k_sub = np.searchsorted(cNs,k+1)
        ks.append(k_sub)
        u_saved = u.copy()
        u[k] += deltaU
        if u[k] > 1:
            avc+= 1
            avsize = np.zeros(len(Ns),dtype=np.int64)
            A = u > 1;
            avinc = get_avinc(A,Ns,nNs) # vector len(Ns)
            avt.append(step)
            avunits = []
            while np.sum(avinc) > 0:
                avsize += avinc
                u[A] -= 1
                rec_int = W@avinc.astype(np.float64)
                for i in range(len(Ns)):
                    u[pop_ids(i)]+=rec_int[i]/Ns[i]
                A = u>1
                avinc = get_avinc(A,Ns,nNs)
            if (k_sub != th_idx) and  (avsize[0]+avsize[1]<thresh):
                u[pop_ids(th_idx)] = u_saved[pop_ids(th_idx)]
                avsize[th_idx] = 0 
            avs.append(avsize)
            #avu.append(avunits)
        step += 1
    return avs,np.array(avt),u,ks


@numba.njit(cache=True)
def simulate_model_subnets_nonorm_thresholds(Ns,W,p,deltaU,thresh=0,num_steps=None,num_av=None,u0=None,outdir=None):
    th_idx = 4 #TODO Hardcoded index!!!!
    Ns = np.array(Ns,dtype=np.int64)
    N = np.sum(Ns)
    u = np.random.random((N,)) if u0 is None else u0
    avc = 0
    step = 0
    neurons = np.arange(N)
    I = np.eye(len(Ns))
    avs = []
    avt = []
    #pc = np.cumsum(np.concatenate(tuple([np.array([ps/n]*n) for ps,n in zip(p,Ns)])))
    avu = []
    ks = []
    cNs = np.cumsum(Ns)
    nNs = np.concatenate((np.array([0]),cNs))
    pop_ids = lambda k: slice(nNs[k],nNs[k+1],None)
    pbig = np.zeros(N)
    for k in range(len(Ns)):
        pbig[pop_ids(k)] = p[k]/Ns[k]
    pc = np.cumsum(pbig)
    u_saved = u.copy()
    #pc = np.cumsum(np.concatenate([[ps/n]*n for ps,n in zip(p,Ns)]))

    while avc < num_av if num_av is not None else step < num_steps:
        k = np.searchsorted(pc,np.random.random())
        k_sub = np.searchsorted(cNs,k+1)
        ks.append(k_sub)
        u_saved = u.copy()
        u[k] += deltaU
        if u[k] > 1:
            avc+= 1
            avsize = np.zeros(len(Ns),dtype=np.int64)
            A = u > 1;
            avinc = get_avinc(A,Ns,nNs) # vector len(Ns)
            avt.append(step)
            avunits = []
            while np.sum(avinc) > 0:
                avsize += avinc
                u[A] -= 1
                rec_int = W@avinc.astype(np.float64)
                for i in range(len(Ns)):
                    u[pop_ids(i)]+=rec_int[i]#/Ns[i]
                A = u>1
                avinc = get_avinc(A,Ns,nNs)
            if (k_sub != th_idx) and  (avsize[0]+avsize[2]<thresh): # TODO Hardcoded indices!!!!
                u[pop_ids(th_idx)] = u_saved[pop_ids(th_idx)]
                avsize[th_idx] = 0 
            avs.append(avsize)
            #avu.append(avunits)
        step += 1
    return avs,np.array(avt),u,ks




def bin_data(data,bins):
    slices = np.linspace(0, len(data), bins+1, True).astype(np.int)
    counts = np.diff(slices)
    mean = np.add.reduceat(data, slices[:-1]) / counts
    return mean


param_array = [(c1,radv,method,trial)
               for c1 in np.linspace(0.2,1,80)
               for radv in [12]
               for method in ['int']#,'ext']
               for trial in range(60)]

c1,radv,method,trial = param_array[task_id-1]#[0.8,12,'int',0]#param_array[task_id-1]#
#c1,radv,method = 

rate1=40;
cup=0.3;
T=250; # war 150
n=100;
n2 = int(n/10);
c=0.25;
thresh=5; # for n=1000
fname=None#'./res_kadabuum'
dtcorr=3

rate2 = rate1+radv
Ns = (n,n2,n,n2,n,1)
ac = 1-1/np.sqrt(n)
c2 = c1
c3 = c2-2*cup
N = 3*n+2*n2+1


Ws = np.zeros((6,6))#one extra unit to supply the overshoot of deltaU external inputs
Ws[0,0] = c1*ac/n # V1 A
# Ws[1,:] is inhibited second population of nonattended V1
Ws[2,2] = c2*ac/n # V1 B 
Ws[3,3] = (1-np.sqrt(n2)/n2)/n2
if method=='int':
    Ws[2,3] = 0.095/n2 # input from crit subnet to V1 B # 0.03 fÃ¼r n=1000
Ws[4,4] = c3*ac/n # V4 pop
Ws[4,0] = cup/n # inputs to V4
Ws[4,2] = cup/n
# Ws[5,:] is dummy population

deltaU = 0.8*(1-(Ws@np.diag(Ns)).sum(axis=1).max())

M1 = np.linalg.inv(np.eye(n)-np.ones((n,n))*c1*ac/n)
ra1 = (M1@(deltaU*np.ones((n,))/n))[0]

suptitle = ''.join([n+'='+str(round(x,2))+',' for n,x in zip(['c1','c2','rate1','rate2','c3','cup','T','n','c'],
                                                    [c1,c2,rate1,rate2,c3,cup,T,n,c])])+'m='+method


flick_dur = 10e-3
dt = flick_dur/10000
#dt = ra1/(rate1+rate2+(rate1+rate2)/2)
#dt = dt/dtcorr


ext_max = 2*(rate1/ra1)*((n+n2)/n)*(1+c)+(rate1/ra1)

############# fine tuning of rates without flicker #########################
# flicka = rate1/ra1
# flickb = rate2/ra2
# p1 = flicka/ext_max
# p2 = flickb/ext_max
# p3 = 0#((rate1/ra1+rate2/ra2)/2)/ext_max
# p_dummy = (1-p1-p2-p3)
# p = np.array([p1,p2,p3,p_dummy])
p = np.array([1,n2/n,1,n2/n,1,0])*rate1/ra1
p[5] = ext_max-np.sum(p)
p = p / np.sum(p)
T_test = 5
ns = int(T_test/dt)
s,_,_,_ = simulate_model_subnets_nonorm_thresholds(Ns,Ws,p,deltaU,num_steps=ns)
s = np.array(s)
real_rate1 = np.sum(s[:,0])/(n*T_test)
real_rate2 = np.sum(s[:,2])/(n*T_test)
print('real rate1 would be '+str(real_rate1),flush=True)
print('rate ratio',real_rate2/real_rate1)
# change dt so that the rates are right
#dt = dt*(real_rate1/rate1)
deltaU = deltaU*(rate1/real_rate1)
print('new deltaU = '+str(deltaU)+' '+str(deltaU + Ws.sum(axis=1).max()))
assert(deltaU+Ws.sum(axis=1).max()<1)



########### now sample with flicker for specified time
#T = 100
flicksa = []
flicksb = []

u = np.random.random((N,))
avss = []
avts = []
kss = []


for it in (range(int(T/flick_dur))):
    #print(it,flush=True)
    if it % int((int(T/flick_dur))/10) == 0:
        print(it,flush=True)

    flicka = (rate1/ra1)*(1+c*flicker())
    flickb = (rate1/ra1)*(1+c*flicker())
    if method=='ext':
        flickb = flickb*1.3
    flicksa.extend([flicka]*int(flick_dur/dt))
    flicksb.extend([flickb]*int(flick_dur/dt))
    p1 = flicka
    p2 = flicka*(n2/n)
    p3 = flickb
    p4 = flickb*(n2/n)
    p5 = 0#2*rate1/ra1
    p = np.array([p1,p2,p3,p4,p5,0])
    p[5] = ext_max - np.sum(p)
    p = p/np.sum(p)
    ns = int(flick_dur/dt)
    avs,avt,u,ks = simulate_model_subnets_nonorm_thresholds(Ns,Ws,p,deltaU,thresh=thresh,num_steps=ns,u0=u)
    avs = np.array(avs)
    kss.append(ks)
    avss.append(avs)
    avts.append(np.array(avt)+it*int(flick_dur/dt))

flicksa = np.array(flicksa)
flicksb = np.array(flicksb)
avs = np.concatenate(avss)
avt = np.concatenate(avts)
ks = np.concatenate(kss)
ns = len(ks)
print(len(avs),flush=True)

spv = np.zeros((5,ns),dtype=int)
finpA = np.zeros((ns,),dtype=int)
finpB = np.zeros_like(finpA)

finpA[ks==0] = 1
finpB[ks==1] = 1

for at,a in zip(avt,avs):
    spv[0,at] = a[0]
    spv[1,at] = a[2]
    spv[2,at] = a[4]

Vthr = 1
tau = 3e-3
dV = 2/(n)#1.2/(n)
#ext_inputs = np.sum(spv[:2,:],axis=0)
#ext = np.random.random((ns,)) < 100*T*n/ns
#ext = np.random.random((ns,)) < 800*T/ns
ext_inputs = np.sum(spv[:2,:],axis=0)
V,s = sim_iaf(ns,dt,ext_inputs,tau,Vthr=Vthr,dV=dV)
spv[3,s] = 1

# tau = 2e-3
# V,s = sim_iaf(ns,dt,spv[0,:]+spv[1,:],tau=tau,Vthr=Vthr,dV=dV)
# spv[4,s] = 1


# n_levels = 1000
# dV = 20
# p_leak = 0.0642
# #ext_inputs = np.sum(spv[:2,:],axis=0)
# V,s = sim_iaf_discrete(ns,dt,ext_inputs,dV,1,num_levels =n_levels,p_leak =p_leak)
# s = np.array(s)
# spv[4,s] = 1



print('pop_rates')
print(np.sum(spv[0,:])/(T*n))
print(np.sum(spv[1,:])/(T*n))
print(np.sum(spv[2,:])/(T*n))
print('rate leaky iaf')
print(np.sum(spv[3,:])/(T))
# print('rate discrete leaky iaf')
# print(np.sum(spv[4,:])/(T))

# plt.figure(figsize=(8,8))
# uA,cA = np.unique(spv[0,:],return_counts=True)
# plt.loglog(uA[1:],cA[1:]/np.sum(cA[1:]),label='V1A')
# plt.loglog(np.arange(n)+1,ehe_ana(ac*c1,n),label='V1A analytic')
# uB,cB = np.unique(spv[1,:],return_counts=True)
# plt.loglog(uB[1:],cB[1:]/np.sum(cB[1:]),label='V1B')
# plt.loglog(np.arange(n)+1,ehe_ana(ac*c2,n),label='V1B analytic')
# uV4,cV4 = np.unique(spv[2,:],return_counts=True)
# plt.loglog(uV4[1:],cV4[1:]/np.sum(cV4[1:]),label='V4')
# plt.legend()
# plt.ylim([1/max(np.sum(cA[1:]),np.sum(cB[:])),1])
# plt.title('avalanche statistics '+suptitle)
# if fname is not None:
#     plt.savefig(fname+'_figure_avs.png',dpi=200)


print('subsample to 1ms')
print('this corresponds to '+str(int(1e-3/dt))+' dts')

Ts = len(ks)*dt
bins = int(Ts/1e-3)

flick_dur = int(1e-3/dt)*dt
Bend = int(len(ks)/(flick_dur/dt))#int(T/flick_dur)

#fA = flicksa[::int(flick_dur/dt)]
#fB = flicksb[::int(flick_dur/dt)]
fA = bin_data(flicksa,bins)
fB = bin_data(flicksb,bins)
# binnedfA = bin_data(finpA,bins)
# binnedfB = bin_data(finpB,bins)
# binnedA = bin_data(spv[0,:],bins)
# binnedB = bin_data(spv[1,:],bins)
# binnedV4 = bin_data(spv[2,:],bins)
binnedV4_leak = bin_data(spv[3,:],bins)
# binnedV4_leak_dis = bin_data(spv[4,:],bins)

#dt = int(flick_dur/dt)*dt
dt = Ts/bins


# pop_act_A = spv[0,:]/n
# pop_act_B = spv[1,:]/n
# pop_act_V4 = spv[2,:]/n
pop_act_V4_leak = spv[3,:]
# pop_act_V4_leak_dis = spv[4,:]

print('parameter values',flush=True)
print(suptitle,flush=True)

print('eq rates',flush=True)
# print(pop_act_A.sum()/T,flush=True)
# print(pop_act_B.sum()/T,flush=True)
# print(pop_act_V4.sum()/T,flush=True)
print(pop_act_V4_leak.sum()/T,flush=True)
# print(pop_act_V4_leak_dis.sum()/T,flush=True)

# print('corr coefs pop_act A,V4 and B,V4')
# ccAV4=np.corrcoef(pop_act_A,pop_act_V4)[0,1]
# ccBV4=np.corrcoef(pop_act_B,pop_act_V4)[0,1]
# print(ccAV4,flush=True)
# print(ccBV4,flush=True)

# print('corr coefs pop_act A,V4 and B,V4 leak')
# ccAV4_leak=np.corrcoef(pop_act_A,pop_act_V4_leak)[0,1]
# ccBV4_leak=np.corrcoef(pop_act_B,pop_act_V4_leak)[0,1]
# print(ccAV4_leak,flush=True)
# print(ccBV4_leak,flush=True)


# print('corr coefs pop_act A,V4 and B,V4 leak_dis')
# ccAV4_leak_dis=np.corrcoef(pop_act_A,pop_act_V4_leak_dis)[0,1]
# ccBV4_leak_dis=np.corrcoef(pop_act_B,pop_act_V4_leak_dis)[0,1]
# print(ccAV4_leak_dis,flush=True)
# print(ccBV4_leak_dis,flush=True)



# print('corr coefs binned pop_act A,V4 and B,V4')
# ccbAV4 = np.corrcoef(binnedA,binnedV4)[0,1]
# ccbBV4 = np.corrcoef(binnedB,binnedV4)[0,1]
# print(ccbAV4,flush=True)
# print(ccbBV4,flush=True)

# print('corr coefs binned pop_act A,V4 and B,V4 leak')
# ccbAV4_leak = np.corrcoef(binnedA,binnedV4_leak)[0,1]
# ccbBV4_leak = np.corrcoef(binnedB,binnedV4_leak)[0,1]
# print(ccbAV4_leak,flush=True)
# print(ccbBV4_leak,flush=True)


# print('corr coefs binned pop_act A,V4 and B,V4 leak_dis')
# ccbAV4_leak_dis = np.corrcoef(binnedA,binnedV4_leak_dis)[0,1]
# ccbBV4_leak_dis = np.corrcoef(binnedB,binnedV4_leak_dis)[0,1]
# print(ccbAV4_leak_dis,flush=True)
# print(ccbBV4_leak_dis,flush=True)



# print('corr coef flicker input A,V4 B,V4')
# ccfinpAV4 = np.corrcoef(finpA,pop_act_V4)[0,1]
# ccfinpBV4 = np.corrcoef(finpB,pop_act_V4)[0,1]
# print(ccfinpAV4,flush=True)
# print(ccfinpBV4,flush=True)

# print('corr coef flicker input A,V4 B,V4 leak')
# ccfinpAV4_leak = np.corrcoef(finpA,pop_act_V4_leak)[0,1]
# ccfinpBV4_leak = np.corrcoef(finpB,pop_act_V4_leak)[0,1]
# print(ccfinpAV4_leak,flush=True)
# print(ccfinpBV4_leak,flush=True)


# print('corr coef flicker input A,V4 B,V4 leak_dis')
# ccfinpAV4_leak_dis = np.corrcoef(finpA,pop_act_V4_leak_dis)[0,1]
# ccfinpBV4_leak_dis = np.corrcoef(finpB,pop_act_V4_leak_dis)[0,1]
# print(ccfinpAV4_leak_dis,flush=True)
# print(ccfinpBV4_leak_dis,flush=True)


# print('corr coef flicker binned A,V4 B,V4')
# ccbfAV4 =np.corrcoef(binnedfA,binnedV4)[0,1]
# ccbfBV4 = np.corrcoef(binnedfB,binnedV4)[0,1]
# print(ccbfAV4,flush=True)
# print(ccbfBV4,flush=True)

# print('corr coef flicker binned A,V4 B,V4 leak')
# ccbfAV4_leak =np.corrcoef(binnedfA,binnedV4_leak)[0,1]
# ccbfBV4_leak = np.corrcoef(binnedfB,binnedV4_leak)[0,1]
# print(ccbfAV4_leak,flush=True)
# print(ccbfBV4_leak,flush=True)


# print('corr coef flicker binned A,V4 B,V4 leak_dis')
# ccbfAV4_leak_dis =np.corrcoef(binnedfA,binnedV4_leak_dis)[0,1]
# ccbfBV4_leak_dis = np.corrcoef(binnedfB,binnedV4_leak_dis)[0,1]
# print(ccbfAV4_leak_dis,flush=True)
# print(ccbfBV4_leak_dis,flush=True)


# print('corr coef real flicker input A,V4 B,V4')
# ccfAV4 =np.corrcoef(fA,binnedV4)[0,1]
# ccfBV4 = np.corrcoef(fB,binnedV4)[0,1]
# print(ccfAV4,flush=True)
# print(ccfBV4,flush=True)



print('corr coef real flicker input A,V4 B,V4 leak')
ccfAV4_leak =np.corrcoef(fA,binnedV4_leak)[0,1]
ccfBV4_leak = np.corrcoef(fB,binnedV4_leak)[0,1]
print(ccfAV4_leak,flush=True)
print(ccfBV4_leak,flush=True)


# print('corr coef real flicker input A,V4 B,V4 leak_dis')
# ccfAV4_leak_dis =np.corrcoef(fA,binnedV4_leak_dis)[0,1]
# ccfBV4_leak_dis = np.corrcoef(fB,binnedV4_leak_dis)[0,1]
# print(ccfAV4_leak_dis,flush=True)
# print(ccfBV4_leak_dis,flush=True)


tau_k = 15e-3
t_k = np.arange(0,4*tau_k,dt)
Kexp = 1/tau_k*np.exp(-t_k/tau_k);
lfp = [None,None,None,None]

freqs= np.logspace(np.log10(5),np.log10(200),100)
#f0 = 4.84
#freqs = f0*1.2**np.arange(20)
num_pops = 3
# lfp[0] = np.convolve(np.array(binnedA)/N,Kexp,mode='same')
# lfp[1] = np.convolve(np.array(binnedB)/N,Kexp,mode='same')
# lfp[2] = np.convolve(np.array(binnedV4)/N,Kexp,mode='same')
lfp[3] = np.convolve(np.array(binnedV4_leak),Kexp,mode='same')
   #lfp[p] = lfp[p][int(0.1*len(lfp[p])):int(0.9*len(lfp[p]))]


subsample_fact = 1

cwt_V4_leak,_ = wavelet_morlet(lfp[3][::subsample_fact],subsample_fact*dt,freqs)
# cwt_V4,_ = wavelet_morlet(lfp[2][::subsample_fact],subsample_fact*dt,freqs)
# cwt_A,_ =  wavelet_morlet(lfp[0][::subsample_fact],subsample_fact*dt,freqs)
# cwt_B,_ =  wavelet_morlet(lfp[1][::subsample_fact],subsample_fact*dt,freqs)

# cwt_flickA,_ = wavelet_morlet(np.array(binnedfA[::subsample_fact]),subsample_fact*dt,freqs)
# cwt_flickB,coi = wavelet_morlet(np.array(binnedfB[::subsample_fact]),subsample_fact*dt,freqs)

# c4A,taus = spectral_coherence(np.array([cwt_A]),np.array([cwt_V4]),tau_max = 0.2,ntau=4,dt=subsample_fact*dt)
# c4B,taus = spectral_coherence(np.array([cwt_B]),np.array([cwt_V4]),tau_max = 0.2,ntau=4,dt=subsample_fact*dt)

# c4A_leak,taus = spectral_coherence(np.array([cwt_A]),np.array([cwt_V4_leak]),tau_max = 0.2,ntau=4,dt=subsample_fact*dt)
# c4B_leak,taus = spectral_coherence(np.array([cwt_B]),np.array([cwt_V4_leak]),tau_max = 0.2,ntau=4,dt=subsample_fact*dt)


# c4flickA,taus = spectral_coherence(np.array([cwt_flickA]),np.array([cwt_V4]),tau_max = 0.2,ntau=4,dt=subsample_fact*dt)
# c4flickB,taus = spectral_coherence(np.array([cwt_flickB]),np.array([cwt_V4]),tau_max = 0.2,ntau=4,dt=subsample_fact*dt)

# c4flickA_leak,taus = spectral_coherence(np.array([cwt_flickA]),np.array([cwt_V4_leak]),tau_max = 0.2,ntau=4,dt=subsample_fact*dt)
# c4flickB_leak,taus = spectral_coherence(np.array([cwt_flickB]),np.array([cwt_V4_leak]),tau_max = 0.2,ntau=4,dt=subsample_fact*dt)

cwt_fA,_ = wavelet_morlet(np.array(fA[::subsample_fact]),subsample_fact*dt,freqs)
cwt_fB,coi = wavelet_morlet(np.array(fB[::subsample_fact]),subsample_fact*dt,freqs)

# c4fA,taus = spectral_coherence(np.array([cwt_fA]),np.array([cwt_V4]),tau_max = 0.2,ntau=4,dt=subsample_fact*dt)
# c4fB,taus = spectral_coherence(np.array([cwt_fB]),np.array([cwt_V4]),tau_max = 0.2,ntau=4,dt=subsample_fact*dt)

c4fA_leak,taus = spectral_coherence(np.array([cwt_fA]),np.array([cwt_V4_leak]),tau_max = 0.2,ntau=4,dt=subsample_fact*dt)
c4fB_leak,taus = spectral_coherence(np.array([cwt_fB]),np.array([cwt_V4_leak]),tau_max = 0.2,ntau=4,dt=subsample_fact*dt)


# cfAA,taus = spectral_coherence(np.array([cwt_fA]),np.array([cwt_A]),tau_max = 0.2,ntau=4,dt=subsample_fact*dt)
# cfBB,taus = spectral_coherence(np.array([cwt_fB]),np.array([cwt_B]),tau_max = 0.2,ntau=4,dt=subsample_fact*dt)

# cflickAA,taus = spectral_coherence(np.array([cwt_flickA]),np.array([cwt_A]),tau_max = 0.2,ntau=4,dt=subsample_fact*dt)
# cflickBB,taus = spectral_coherence(np.array([cwt_flickB]),np.array([cwt_B]),tau_max = 0.2,ntau=4,dt=subsample_fact*dt)



# plt.figure()
# plt.semilogy(freqs,np.mean(np.abs(cwt_A),axis=1),label='A')
# plt.semilogy(freqs,np.mean(np.abs(cwt_B),axis=1),label='B')
# plt.semilogy(freqs,np.mean(np.abs(cwt_V4),axis=1),label='C')
# #plt.semilogy(freqs,np.mean(np.abs(cwt_V4_leak),axis=1),label='C_leak')
# plt.title('mean abs wavelet coefficients')
# plt.legend()
# plt.xlabel('freq [Hz]')
# if fname is not None:
#     plt.savefig(fname+'_figure_wavelet_spect.png',dpi=200)


# sc_plot(c4A,c4B,taus,freqs,titleA='sc V1a V4',titleB='sc V1b V4',suptitle=suptitle)
# if fname is not None:
#     plt.savefig(fname+'_figure_scV1V4.png',dpi=200)
# print('sum of sc values V1aV4 vs V1bV4') 
# print(np.sum(c4A),flush=True)
# print(np.sum(c4B),flush=True)

# sc_plot(c4A_leak,c4B_leak,taus,freqs,titleA='sc V1a V4',titleB='sc V1b V4',suptitle=suptitle)
# if fname is not None:
#     plt.savefig(fname+'_figure_scV1V4_leak.png',dpi=200)
# print('sum of sc values V1aV4 vs V1bV4') 
# print(np.sum(c4A_leak),flush=True)
# print(np.sum(c4B_leak),flush=True)


# sc_plot(c4flickA,c4flickB,taus,freqs,titleA='sc flick inp A V4 (1ms)',titleB='sc flick inp B V4 (1ms)',suptitle=suptitle )
# if fname is not None:
#     plt.savefig(fname+'_figure_scflickinpV4.png',dpi=200)
# print('sum of sc values flicker a,V4 vs flicker b,V4') 
# print(np.sum(c4flickA),flush=True)
# print(np.sum(c4flickB),flush=True)


# sc_plot(c4flickA_leak,c4flickB_leak,taus,freqs,titleA='sc flick inp A V4 (1ms)',titleB='sc flick inp B V4 (1ms)',suptitle=suptitle )
# if fname is not None:
#     plt.savefig(fname+'_figure_scflickinpV4_leak.png',dpi=200)
# print('sum of sc values flicker a,V4 vs flicker b,V4') 
# print(np.sum(c4flickA_leak),flush=True)
# print(np.sum(c4flickB_leak),flush=True)



# sc_plot(c4fA,c4fB,taus,freqs,titleA='sc flick A V4 (10ms)',titleB='sc flick B V4 (10ms)',suptitle=suptitle)
# if fname is not None:
#     plt.savefig(fname+'_figure_scflickV4.png',dpi=200)
# print('sum of sc values flicker a,V4 vs flicker b,V4 (10ms)') 
# print(np.sum(c4fA),flush=True)
# print(np.sum(c4fB),flush=True)


# sc_plot(c4fA_leak,c4fB_leak,taus,freqs,titleA='sc flick A V4 (10ms)',titleB='sc flick B V4 (10ms)',suptitle=suptitle)
# if fname is not None:
#     plt.savefig(fname+'_figure_scflickV4_leak.png',dpi=200)
print('sum of sc values flicker a,V4 vs flicker b,V4 (10ms)') 
print(np.sum(c4fA_leak),flush=True)
print(np.sum(c4fB_leak),flush=True)



# sc_plot(cfAA,cfBB,taus,freqs,titleA='sc flick A V1A (10ms)',titleB='sc flick B V1B (10ms)',suptitle=suptitle)
# if fname is not None:
#     plt.savefig(fname+'_figure_scflickV1.png',dpi=200)
# print('sum of sc values flicker a,V1A vs flicker b,V1B (10ms)') 
# print(np.sum(cfAA),flush=True)
# print(np.sum(cfBB),flush=True)


# sc_plot(cflickAA,cflickBB,taus,freqs,titleA='sc flick inp A V1A (1ms)',titleB='sc flick inp B V1B (1ms)',suptitle=suptitle)
# if fname is not None:
#     plt.savefig(fname+'_figure_scflicinpV1.png',dpi=200)
# print('sum of sc values flicker a,V1A vs flicker b,V1b (1ms)') 
# print(np.sum(cflickAA),flush=True)
# print(np.sum(cflickBB),flush=True)



res = {}
#res['spectral coherences'] = [np.sum(np.abs(x)) for x in [c4A,c4B,c4flickA,c4flickB,c4fA,c4fB,cfAA,cfBB,cflickAA,cflickBB]]
res['spectral coherences leak'] = [np.sum(np.abs(x)) for x in [# c4A_leak,c4B_leak,c4flickA_leak,c4flickB_leak,
                                                               c4fA_leak,c4fB_leak]]
res['spectral coherences leak tau=0'] = [x[:,4] for x in [# c4A_leak,c4B_leak,c4flickA_leak,c4flickB_leak,
                                                               c4fA_leak,c4fB_leak]]

#res['correlations leak_dis'] = [ccAV4_leak_dis,ccBV4_leak_dis,ccbAV4_leak_dis,ccbBV4_leak_dis,ccfinpAV4_leak_dis,ccfinpBV4_leak_dis,ccbfAV4_leak_dis,ccbfBV4_leak_dis,ccfAV4_leak_dis,ccfBV4_leak_dis]
res['correlations leak'] = [# ccAV4_leak,ccBV4_leak,ccbAV4_leak,ccbBV4_leak,ccfinpAV4_leak,ccfinpBV4_leak,ccbfAV4_leak,ccbfBV4_leak,
                            ccfAV4_leak,ccfBV4_leak]
#res['correlations'] = [ccAV4,ccBV4,ccbAV4,ccbBV4,ccfinpAV4,ccfinpBV4,ccbfAV4,ccbfBV4,ccfAV4,ccfBV4]
#res['pop_acts'] = [pop_act_A.sum()/T,pop_act_B.sum()/T,pop_act_V4.sum()/T,pop_act_V4_leak.sum()/T,pop_act_V4_leak_dis.sum()/T]
res['param_names'] = ['c1','c2','rate1','rate2','c3','cup','T','n','dtcorr','c','method']
res['param_values'] = [c1,c2,rate1,rate2,c3,cup,T,n,dtcorr,c,method]
#res['avalanches'] = [uA,cA,uB,cB,uV4,cV4]


